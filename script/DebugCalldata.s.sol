// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity ^0.8.28;

import {Script, console} from "forge-std/Script.sol";

contract DebugCalldata is Script {
    // These can be changed for different scenarios
    address constant TARGET_ADDRESS = 0x13B93D4b87f1BFa27B8828054d6Bc0Be2b592dB1; // the Metri safe address
    address constant CALLER_ADDRESS = 0x75cf11467937ce3F2f357CE24ffc3DBF8fD5c226; // the 4337 module address
    
    function setUp() public {}

    function run() public {
        // Fork Gnosis chain
        uint256 gnosisFork = vm.createSelectFork(vm.envString("GNOSIS_RPC"));
        
       // how to handle Metri calldata: replace 541d63c8 with 5229073f and call from 4337 module
        bytes memory calldata_ = hex"5229073f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000056000000000000000000000000000000000000000000000000000000000000006e000000000000000000000000000000000000000000000000000000000000008600000000000000000000000000000000000000000000000000000000000000960000000000000000000000000c12c1e50abb450d6205ea2c3fa861b3b834d13e800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c4f242432a00000000000000000000000013b93d4b87f1bfa27b8828054d6bc0be2b592db10000000000000000000000001648610b8d538a3ce6f74697e4eabb000bc1cf7a0000000000000000000000001648610b8d538a3ce6f74697e4eabb000bc1cf7a0000000000000000000000000000000000000000000000056b80c96dc17e17c000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c12c1e50abb450d6205ea2c3fa861b3b834d13e800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c4f242432a00000000000000000000000013b93d4b87f1bfa27b8828054d6bc0be2b592db10000000000000000000000006b9faa01e42e6be3c80d4901bbad2cb9793aaebe0000000000000000000000006b9faa01e42e6be3c80d4901bbad2cb9793aaebe0000000000000000000000000000000000000000000000056b80c96dc17e17c000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c12c1e50abb450d6205ea2c3fa861b3b834d13e800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c4f242432a00000000000000000000000013b93d4b87f1bfa27b8828054d6bc0be2b592db1000000000000000000000000d16650ede94715bd8b5d039b785e7e88e4588868000000000000000000000000d16650ede94715bd8b5d039b785e7e88e45888680000000000000000000000000000000000000000000000056b3a38451552311a00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c12c1e50abb450d6205ea2c3fa861b3b834d13e800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c4f242432a00000000000000000000000013b93d4b87f1bfa27b8828054d6bc0be2b592db10000000000000000000000006eb368313d028a3b5aab462d9a8b178f179a7cf00000000000000000000000006eb368313d028a3b5aab462d9a8b178f179a7cf00000000000000000000000000000000000000000000000056af3aab32fcf8b0f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c12c1e50abb450d6205ea2c3fa861b3b834d13e800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c4f242432a00000000000000000000000013b93d4b87f1bfa27b8828054d6bc0be2b592db1000000000000000000000000e3134156b6981c305c25bd622cb96f3e7c285fc5000000000000000000000000e3134156b6981c305c25bd622cb96f3e7c285fc50000000000000000000000000000000000000000000000056af3aab32fcf8b0f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c12c1e50abb450d6205ea2c3fa861b3b834d13e80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044e76cec530000000000000000000000001648610b8d538a3ce6f74697e4eabb000bc1cf7a1bd2522c3843eb3f9f3347d7578fecedee2f3458c28a59696f697034751a34fd00000000000000000000000000000000000000000000000000000000000000000000000000000000ca8222e780d046707083f51377b5fd85e28660140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000024baa3440f00000000000000000000000086533d1ada8ffbe7b6f7244f9a1b707f7f3e239b00000000000000000000000000000000000000000000000000000000";
       
        console.log("Simulating call to:", TARGET_ADDRESS);
        console.log("From address:", CALLER_ADDRESS);
        console.log("Calldata:");
        console.logBytes(calldata_);

        // Simulate the call
        vm.prank(CALLER_ADDRESS);
        (bool success, bytes memory returnData) = TARGET_ADDRESS.call(calldata_);

        console.log("\nExecution result:");
        console.log("Success:", success);
        if (!success) {
            console.log("Revert data:");
            console.logBytes(returnData);
        }
    }
} 